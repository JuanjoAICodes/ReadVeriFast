# Generated by Django 5.2.4 on 2025-08-25 21:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "current_wpm",
                    models.PositiveIntegerField(
                        default=250,
                        help_text="User's current words-per-minute reading speed.",
                        verbose_name="Current WPM",
                    ),
                ),
                (
                    "max_wpm",
                    models.PositiveIntegerField(
                        default=250,
                        help_text="User's highest achieved words-per-minute.",
                        verbose_name="Maximum WPM",
                    ),
                ),
                (
                    "total_xp",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total accumulated experience points (XP).",
                        verbose_name="Total XP",
                    ),
                ),
                (
                    "current_xp_points",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Spendable experience points.",
                        verbose_name="Current XP Points",
                    ),
                ),
                (
                    "negative_xp_points",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Accumulated negative XP for admin tracking.",
                        verbose_name="Negative XP Points",
                    ),
                ),
                (
                    "last_successful_wpm_used",
                    models.PositiveIntegerField(
                        default=250,
                        help_text="The WPM setting used on the last successfully completed quiz.",
                        verbose_name="Last Successful WPM Used",
                    ),
                ),
                (
                    "ad_free_articles_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of ad-free articles the user can access.",
                        verbose_name="Ad-free Articles Count",
                    ),
                ),
                (
                    "has_font_opensans",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased OpenSans font option.",
                    ),
                ),
                (
                    "has_font_opendyslexic",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased OpenDyslexic font for dyslexia-friendly reading.",
                    ),
                ),
                (
                    "has_font_roboto",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased Roboto font option.",
                    ),
                ),
                (
                    "has_font_merriweather",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased Merriweather font option.",
                    ),
                ),
                (
                    "has_font_playfair",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased Playfair Display font option.",
                    ),
                ),
                (
                    "has_2word_chunking",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased 2-word chunking capability.",
                    ),
                ),
                (
                    "has_3word_chunking",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased 3-word chunking capability.",
                    ),
                ),
                (
                    "has_4word_chunking",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased 4-word chunking capability.",
                    ),
                ),
                (
                    "has_5word_chunking",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased 5-word chunking capability.",
                    ),
                ),
                (
                    "has_smart_connector_grouping",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased smart connector grouping (groups stop words like 'the dragon').",
                    ),
                ),
                (
                    "has_smart_symbol_handling",
                    models.BooleanField(
                        default=False,
                        help_text="User has purchased smart symbol handling (elegant punctuation display).",
                    ),
                ),
                (
                    "last_xp_earned",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of when user last earned XP.",
                        null=True,
                    ),
                ),
                (
                    "xp_earning_streak",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Current streak of consecutive days earning XP.",
                    ),
                ),
                (
                    "lifetime_xp_earned",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total XP earned throughout user's lifetime.",
                    ),
                ),
                (
                    "lifetime_xp_spent",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total XP spent throughout user's lifetime.",
                    ),
                ),
                (
                    "perfect_quiz_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of perfect (100%) quiz scores achieved.",
                    ),
                ),
                (
                    "quiz_attempts_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of quiz attempts made."
                    ),
                ),
                (
                    "preferred_language",
                    models.CharField(
                        default="en",
                        help_text="User's preferred language for the UI and content (e.g., 'en', 'es').",
                        max_length=10,
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        default="light",
                        help_text="User's preferred visual theme (e.g., 'light', 'dark').",
                        max_length=20,
                    ),
                ),
                (
                    "llm_api_key_encrypted",
                    models.CharField(
                        blank=True,
                        help_text="User's encrypted API key for a preferred LLM provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "preferred_llm_model",
                    models.CharField(
                        blank=True,
                        help_text="The specific LLM model the user prefers to use.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AdminCorrectionDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "original_article_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL of the original article.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "original_content_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 hash of the original content to ensure integrity.",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "corrected_content",
                    models.TextField(
                        blank=True,
                        help_text="The corrected version of the text content.",
                        null=True,
                    ),
                ),
                (
                    "correction_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of correction (e.g., 'summary', 'quiz', 'content').",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "admin_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="The admin user who made the correction.",
                        limit_choices_to={"is_staff": True},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(max_length=500, null=True, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "image_url",
                    models.URLField(
                        blank=True,
                        help_text="URL of the article's main image.",
                        max_length=500,
                        null=True,
                    ),
                ),
                ("language", models.CharField(default="en", max_length=10)),
                (
                    "processing_status",
                    models.CharField(default="pending", max_length=20),
                ),
                ("quiz_data", models.JSONField(blank=True, null=True)),
                (
                    "raw_content",
                    models.TextField(
                        blank=True,
                        help_text="Original raw content of the article before processing.",
                        null=True,
                    ),
                ),
                ("source", models.CharField(default="user_submission", max_length=100)),
                ("publication_date", models.DateTimeField(blank=True, null=True)),
                (
                    "article_type",
                    models.CharField(
                        choices=[
                            ("regular", "Regular Article"),
                            ("wikipedia", "Wikipedia Article"),
                        ],
                        default="regular",
                        help_text="Type of article: regular user submission or Wikipedia article",
                        max_length=20,
                    ),
                ),
                ("word_count", models.PositiveIntegerField(blank=True, null=True)),
                ("letter_count", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Article summary or excerpt", null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "llm_model_used",
                    models.CharField(
                        blank=True,
                        help_text="The LLM model used for processing this article.",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("reading_level", models.FloatField(blank=True, null=True)),
                (
                    "acquisition_source",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Submission"),
                            ("rss", "RSS Feed"),
                            ("newsdata_api", "NewsData.io API"),
                            ("scraping", "Web Scraping"),
                        ],
                        default="manual",
                        help_text="Source method used to acquire this article.",
                        max_length=50,
                        verbose_name="Acquisition Source",
                    ),
                ),
                (
                    "source_url",
                    models.URLField(
                        blank=True,
                        help_text="Original URL where the article was acquired from.",
                        max_length=500,
                        null=True,
                        verbose_name="Source URL",
                    ),
                ),
                (
                    "topic_category",
                    models.CharField(
                        blank=True,
                        help_text="Automatically detected topic category (politics, business, etc.).",
                        max_length=50,
                        verbose_name="Topic Category",
                    ),
                ),
                (
                    "geographic_focus",
                    models.CharField(
                        blank=True,
                        help_text="Geographic region or country focus of the article.",
                        max_length=100,
                        verbose_name="Geographic Focus",
                    ),
                ),
                (
                    "acquisition_timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Timestamp when the article was acquired by the system.",
                        verbose_name="Acquisition Timestamp",
                    ),
                ),
                (
                    "content_quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Automated quality score for the article content (0.0-1.0).",
                        verbose_name="Content Quality Score",
                    ),
                ),
                (
                    "duplicate_check_hash",
                    models.CharField(
                        blank=True,
                        help_text="Hash for duplicate detection based on content similarity.",
                        max_length=64,
                        verbose_name="Duplicate Check Hash",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="verifast_app.article",
                    ),
                ),
                (
                    "parent_comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="verifast_app.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContentAcquisitionLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this acquisition cycle started.",
                        verbose_name="Timestamp",
                    ),
                ),
                (
                    "acquisition_type",
                    models.CharField(
                        choices=[
                            ("rss", "RSS Feed"),
                            ("newsdata_api", "NewsData.io API"),
                            ("scraping", "Web Scraping"),
                            ("full_cycle", "Full Acquisition Cycle"),
                        ],
                        help_text="Type of acquisition performed.",
                        max_length=20,
                        verbose_name="Acquisition Type",
                    ),
                ),
                (
                    "source_name",
                    models.CharField(
                        help_text="Name of the specific source (e.g., 'BBC News', 'NewsData.io').",
                        max_length=100,
                        verbose_name="Source Name",
                    ),
                ),
                (
                    "articles_acquired",
                    models.IntegerField(
                        default=0,
                        help_text="Number of articles successfully acquired.",
                        verbose_name="Articles Acquired",
                    ),
                ),
                (
                    "articles_processed",
                    models.IntegerField(
                        default=0,
                        help_text="Number of articles successfully processed and stored.",
                        verbose_name="Articles Processed",
                    ),
                ),
                (
                    "articles_rejected",
                    models.IntegerField(
                        default=0,
                        help_text="Number of articles rejected due to quality or duplication.",
                        verbose_name="Articles Rejected",
                    ),
                ),
                (
                    "api_calls_used",
                    models.IntegerField(
                        default=0,
                        help_text="Number of API calls consumed during this acquisition.",
                        verbose_name="API Calls Used",
                    ),
                ),
                (
                    "errors_encountered",
                    models.JSONField(
                        default=list,
                        help_text="List of errors encountered during acquisition.",
                        verbose_name="Errors Encountered",
                    ),
                ),
                (
                    "processing_time_seconds",
                    models.FloatField(
                        help_text="Total time taken for this acquisition cycle in seconds.",
                        verbose_name="Processing Time (seconds)",
                    ),
                ),
                (
                    "language_distribution",
                    models.JSONField(
                        default=dict,
                        help_text="Distribution of articles by language (e.g., {'en': 10, 'es': 5}).",
                        verbose_name="Language Distribution",
                    ),
                ),
                (
                    "topic_distribution",
                    models.JSONField(
                        default=dict,
                        help_text="Distribution of articles by topic category.",
                        verbose_name="Topic Distribution",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Acquisition Log",
                "verbose_name_plural": "Content Acquisition Logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["-timestamp"], name="verifast_ap_timesta_0f66c7_idx"
                    ),
                    models.Index(
                        fields=["acquisition_type", "-timestamp"],
                        name="verifast_ap_acquisi_fb76e0_idx",
                    ),
                    models.Index(
                        fields=["source_name", "-timestamp"],
                        name="verifast_ap_source__82b499_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ContentSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for the content source",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the content source"
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("rss", "RSS Feed"),
                            ("newsdata_api", "NewsData.io API"),
                            ("gnews_api", "GNews API"),
                            ("newsapi", "NewsAPI.org"),
                            ("scraper", "Web Scraper"),
                            ("manual", "Manual Submission"),
                        ],
                        help_text="Type of content source",
                        max_length=20,
                    ),
                ),
                (
                    "url",
                    models.URLField(help_text="Primary URL for the content source"),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("es", "Spanish"),
                            ("both", "Both Languages"),
                        ],
                        default="en",
                        help_text="Language(s) supported by this source",
                        max_length=10,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low Priority"),
                            ("normal", "Normal Priority"),
                            ("high", "High Priority"),
                            ("critical", "Critical Priority"),
                        ],
                        default="normal",
                        help_text="Priority level for content acquisition",
                        max_length=10,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this source is currently active",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("error", "Error"),
                            ("rate_limited", "Rate Limited"),
                            ("maintenance", "Maintenance"),
                        ],
                        default="active",
                        help_text="Current operational status",
                        max_length=20,
                    ),
                ),
                (
                    "requests_per_hour",
                    models.PositiveIntegerField(
                        default=60,
                        help_text="Maximum requests per hour for this source",
                    ),
                ),
                (
                    "requests_per_day",
                    models.PositiveIntegerField(
                        default=1000,
                        help_text="Maximum requests per day for this source",
                    ),
                ),
                (
                    "current_hour_requests",
                    models.PositiveIntegerField(
                        default=0, help_text="Requests made in current hour"
                    ),
                ),
                (
                    "current_day_requests",
                    models.PositiveIntegerField(
                        default=0, help_text="Requests made in current day"
                    ),
                ),
                (
                    "last_request_time",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp of last request", null=True
                    ),
                ),
                (
                    "last_successful_fetch",
                    models.DateTimeField(
                        blank=True, help_text="Last successful content fetch", null=True
                    ),
                ),
                (
                    "last_error",
                    models.TextField(
                        blank=True, help_text="Last error message encountered"
                    ),
                ),
                (
                    "consecutive_failures",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of consecutive failures"
                    ),
                ),
                (
                    "total_articles_fetched",
                    models.PositiveIntegerField(
                        default=0, help_text="Total articles successfully fetched"
                    ),
                ),
                (
                    "config_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Source-specific configuration data",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Source",
                "verbose_name_plural": "Content Sources",
                "db_table": "content_sources",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="ContentAcquisitionJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled Acquisition"),
                            ("manual", "Manual Trigger"),
                            ("retry", "Retry Failed"),
                            ("backfill", "Backfill Historical"),
                        ],
                        help_text="Type of acquisition job",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current job status",
                        max_length=20,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="Job start time", null=True
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="Job completion time", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if job failed"
                    ),
                ),
                (
                    "articles_found",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of articles found"
                    ),
                ),
                (
                    "articles_processed",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of articles successfully processed"
                    ),
                ),
                (
                    "articles_duplicated",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of duplicate articles skipped"
                    ),
                ),
                (
                    "articles_rejected",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of articles rejected by quality filters",
                    ),
                ),
                (
                    "config_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Job-specific configuration"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        help_text="Content source for this job",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.contentsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Acquisition Job",
                "verbose_name_plural": "Content Acquisition Jobs",
                "db_table": "content_acquisition_jobs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QuizAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.FloatField()),
                ("wpm_used", models.IntegerField()),
                ("xp_awarded", models.IntegerField()),
                (
                    "result",
                    models.JSONField(
                        blank=True,
                        help_text="Detailed results of the quiz attempt.",
                        null=True,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "reading_time_seconds",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time spent reading the article in seconds.",
                        null=True,
                    ),
                ),
                (
                    "quiz_time_seconds",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time spent taking the quiz in seconds.",
                        null=True,
                    ),
                ),
                (
                    "quiz_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="User's rating of the quiz (e.g., 1-5 stars).",
                        null=True,
                    ),
                ),
                (
                    "quiz_feedback",
                    models.TextField(
                        blank=True, help_text="User's feedback on the quiz.", null=True
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.article",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("slug", models.SlugField(blank=True, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("wikipedia_url", models.URLField(blank=True, null=True)),
                ("wikipedia_content", models.TextField(blank=True, null=True)),
                ("is_validated", models.BooleanField(default=False)),
                ("article_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="verifast_ap_name_210cfa_idx"),
                    models.Index(
                        fields=["is_validated"], name="verifast_ap_is_vali_7e233e_idx"
                    ),
                    models.Index(
                        fields=["-article_count"], name="verifast_ap_article_921cfa_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="article",
            name="tags",
            field=models.ManyToManyField(blank=True, to="verifast_app.tag"),
        ),
        migrations.CreateModel(
            name="XPTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("EARN", "Earned"), ("SPEND", "Spent")],
                        help_text="Whether this transaction earned or spent XP.",
                        max_length=5,
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="XP amount (positive for earn, negative for spend)."
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("quiz_completion", "Quiz Completion"),
                            ("perfect_score_bonus", "Perfect Score Bonus"),
                            ("wpm_improvement", "WPM Improvement"),
                            ("reading_streak", "Reading Streak"),
                            ("comment_post", "Comment Posted"),
                            ("comment_reply", "Comment Reply"),
                            ("interaction_bronze", "Bronze Interaction"),
                            ("interaction_silver", "Silver Interaction"),
                            ("interaction_gold", "Gold Interaction"),
                            ("interaction_reward", "Interaction Reward"),
                            ("feature_purchase", "Feature Purchase"),
                            ("admin_adjustment", "Admin Adjustment"),
                        ],
                        help_text="The source/reason for this XP transaction.",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the transaction."
                    ),
                ),
                (
                    "balance_after",
                    models.PositiveIntegerField(
                        help_text="User's spendable XP balance after this transaction."
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this transaction occurred."
                    ),
                ),
                (
                    "feature_purchased",
                    models.CharField(
                        blank=True,
                        help_text="Name of feature purchased (if applicable).",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Comment that triggered this transaction (if applicable).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="verifast_app.comment",
                    ),
                ),
                (
                    "quiz_attempt",
                    models.ForeignKey(
                        blank=True,
                        help_text="Quiz attempt that triggered this transaction (if applicable).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="verifast_app.quizattempt",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user involved in this XP transaction.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xp_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "XP Transaction",
                "verbose_name_plural": "XP Transactions",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="FeaturePurchase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feature_name",
                    models.CharField(
                        help_text="Internal name of the purchased feature.",
                        max_length=50,
                    ),
                ),
                (
                    "feature_display_name",
                    models.CharField(
                        help_text="Human-readable name of the purchased feature.",
                        max_length=100,
                    ),
                ),
                (
                    "xp_cost",
                    models.PositiveIntegerField(
                        help_text="XP cost of the feature at time of purchase."
                    ),
                ),
                (
                    "purchase_date",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the feature was purchased."
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who purchased the feature.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_purchases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        help_text="The XP transaction record for this purchase.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.xptransaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feature Purchase",
                "verbose_name_plural": "Feature Purchases",
                "ordering": ["-purchase_date"],
            },
        ),
        migrations.CreateModel(
            name="CommentInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("BRONZE", "Bronze"),
                            ("SILVER", "Silver"),
                            ("GOLD", "Gold"),
                            ("REPORT_TROLL", "Report: Troll"),
                            ("REPORT_BAD", "Report: Bad"),
                            ("REPORT_SHIT", "Report: Shit"),
                        ],
                        help_text="Type of interaction (e.g., Bronze, Silver, Gold, Report Tiers).",
                        max_length=15,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "xp_cost",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="XP cost incurred by the user for this interaction.",
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        help_text="The comment being interacted with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who performed the interaction.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "comment", "interaction_type")},
            },
        ),
        migrations.CreateModel(
            name="ContentFingerprint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url_hash",
                    models.CharField(
                        db_index=True,
                        help_text="Hash of the article URL",
                        max_length=64,
                    ),
                ),
                (
                    "title_hash",
                    models.CharField(
                        db_index=True,
                        help_text="Hash of the article title",
                        max_length=64,
                    ),
                ),
                (
                    "content_hash",
                    models.CharField(
                        db_index=True,
                        help_text="Hash of the article content",
                        max_length=64,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        db_index=True, help_text="Article language", max_length=10
                    ),
                ),
                (
                    "topic_category",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Detected topic category",
                        max_length=50,
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this content was first seen"
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this content was last encountered",
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated article if processed",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.article",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        help_text="Source that provided this content",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.contentsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Fingerprint",
                "verbose_name_plural": "Content Fingerprints",
                "db_table": "content_fingerprints",
                "indexes": [
                    models.Index(
                        fields=["url_hash", "language"],
                        name="content_fin_url_has_71094c_idx",
                    ),
                    models.Index(
                        fields=["title_hash", "language"],
                        name="content_fin_title_h_c5ae51_idx",
                    ),
                    models.Index(
                        fields=["content_hash", "language"],
                        name="content_fin_content_a5a998_idx",
                    ),
                    models.Index(
                        fields=["topic_category", "language", "first_seen"],
                        name="content_fin_topic_c_130519_idx",
                    ),
                ],
                "unique_together": {("url_hash", "title_hash", "content_hash")},
            },
        ),
        migrations.CreateModel(
            name="AcquisitionMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(db_index=True, help_text="Date for these metrics"),
                ),
                (
                    "hour",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Hour (0-23) for hourly metrics",
                        null=True,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        help_text="Language (empty for all languages)",
                        max_length=10,
                    ),
                ),
                (
                    "articles_found",
                    models.PositiveIntegerField(
                        default=0, help_text="Articles found from sources"
                    ),
                ),
                (
                    "articles_processed",
                    models.PositiveIntegerField(
                        default=0, help_text="Articles successfully processed"
                    ),
                ),
                (
                    "articles_duplicated",
                    models.PositiveIntegerField(
                        default=0, help_text="Duplicate articles skipped"
                    ),
                ),
                (
                    "articles_rejected",
                    models.PositiveIntegerField(
                        default=0, help_text="Articles rejected by quality filters"
                    ),
                ),
                (
                    "total_requests",
                    models.PositiveIntegerField(
                        default=0, help_text="Total API/RSS requests made"
                    ),
                ),
                (
                    "successful_requests",
                    models.PositiveIntegerField(
                        default=0, help_text="Successful requests"
                    ),
                ),
                (
                    "failed_requests",
                    models.PositiveIntegerField(default=0, help_text="Failed requests"),
                ),
                (
                    "avg_response_time",
                    models.FloatField(
                        default=0.0, help_text="Average response time in seconds"
                    ),
                ),
                (
                    "avg_content_length",
                    models.PositiveIntegerField(
                        default=0, help_text="Average content length in characters"
                    ),
                ),
                (
                    "avg_reading_level",
                    models.FloatField(default=0.0, help_text="Average reading level"),
                ),
                (
                    "quiz_generation_success_rate",
                    models.FloatField(
                        default=0.0, help_text="Quiz generation success rate"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "source",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific source (null for aggregate)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="verifast_app.contentsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Acquisition Metrics",
                "verbose_name_plural": "Acquisition Metrics",
                "db_table": "acquisition_metrics",
                "indexes": [
                    models.Index(
                        fields=["date", "source"], name="acquisition_date_07d9eb_idx"
                    ),
                    models.Index(
                        fields=["date", "language"], name="acquisition_date_cc83a1_idx"
                    ),
                    models.Index(
                        fields=["date", "hour"], name="acquisition_date_050883_idx"
                    ),
                ],
                "unique_together": {("date", "hour", "source", "language")},
            },
        ),
        migrations.AddIndex(
            model_name="xptransaction",
            index=models.Index(
                fields=["user", "-timestamp"], name="verifast_ap_user_id_57c803_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="xptransaction",
            index=models.Index(
                fields=["transaction_type", "-timestamp"],
                name="verifast_ap_transac_a61bf1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="xptransaction",
            index=models.Index(
                fields=["source", "-timestamp"], name="verifast_ap_source_030539_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="featurepurchase",
            index=models.Index(
                fields=["user", "-purchase_date"], name="verifast_ap_user_id_dcc388_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="featurepurchase",
            index=models.Index(
                fields=["feature_name", "-purchase_date"],
                name="verifast_ap_feature_620b9e_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="featurepurchase",
            unique_together={("user", "feature_name")},
        ),
    ]
