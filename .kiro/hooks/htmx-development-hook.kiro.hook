{
  "enabled": true,
  "name": "HTMX Development Quality Hook",
  "description": "Ensures HTMX hybrid architecture compliance and code quality for VeriFast development",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "verifast_app/views.py",
      "verifast_app/services.py",
      "verifast_app/templates/**/*.html",
      "verifast_app/static/**/*.js",
      "verifast_app/static/**/*.css"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "An HTMX-related file has been modified. Please validate HTMX hybrid architecture compliance:\n\n**Quality Checks:**\n1. **Server-side logic dominance**: Ensure business logic is in Django views/services, not JavaScript\n2. **Minimal JavaScript usage**: Alpine.js components should be under 30 lines each\n3. **HTMX endpoint validation**: Check that all hx-get/hx-post URLs exist in urls.py\n4. **CSRF token inclusion**: All HTMX POST requests must include CSRF tokens\n5. **View function validation**: Ensure HTMX endpoints return proper template responses\n\n**Commands to run:**\n- `python manage.py check --tag templates` - Validate Django template syntax\n- `python manage.py check --tag urls` - Validate URL patterns for HTMX endpoints\n\n**Documentation reminders:**\n- When modifying views.py or services.py: Consider updating architecture documentation\n- When adding new URL patterns: Consider updating API documentation\n\n**References:**\n- HTMX Architecture Spec: .kiro/specs/htmx-hybrid-architecture/\n- HTMX Debugging Guide: documentation/troubleshooting/htmx-debugging-guide.md\n- Project Architecture Guide: documentation/PROJECT_ARCHITECTURE_GUIDE.md\n\nReport any compliance issues and suggest fixes to maintain the HTMX hybrid architecture."
  }
}