# Generated by Django 5.2.4 on 2025-07-29 02:22

from django.db import migrations
import re


def calculate_word_count(content):
    """Calculate word count from article content."""
    if not content:
        return 0
    words = re.findall(r'\b\w+\b', content)
    return len(words)


def calculate_reading_level(content):
    """Calculate reading level using simplified Flesch-Kincaid formula."""
    if not content:
        return 0.0
    
    # Count sentences (approximate by counting sentence-ending punctuation)
    sentences = re.split(r'[.!?]+', content)
    sentence_count = len([s for s in sentences if s.strip()])
    
    # Count syllables (approximate by counting vowel groups)
    words = re.findall(r'\b\w+\b', content.lower())
    word_count = len(words)
    
    if sentence_count == 0 or word_count == 0:
        return 0.0
    
    syllable_count = 0
    for word in words:
        # Simple syllable counting: count vowel groups
        vowel_groups = re.findall(r'[aeiouy]+', word)
        syllables = len(vowel_groups) if vowel_groups else 1
        syllable_count += syllables
    
    # Flesch-Kincaid Grade Level formula
    avg_sentence_length = word_count / sentence_count
    avg_syllables_per_word = syllable_count / word_count
    
    grade_level = (0.39 * avg_sentence_length) + (11.8 * avg_syllables_per_word) - 15.59
    return max(0.0, round(grade_level, 1))


def calculate_missing_fields(apps, schema_editor):
    """Calculate missing word_count and reading_level for existing articles."""
    Article = apps.get_model('verifast_app', 'Article')
    
    articles_to_update = []
    
    for article in Article.objects.filter(processing_status='complete'):
        updated = False
        
        if not article.word_count and article.content:
            article.word_count = calculate_word_count(article.content)
            updated = True
        
        if not article.reading_level and article.content:
            article.reading_level = calculate_reading_level(article.content)
            updated = True
        
        if updated:
            articles_to_update.append(article)
    
    # Bulk update for performance
    if articles_to_update:
        Article.objects.bulk_update(articles_to_update, ['word_count', 'reading_level'])
        print(f"Updated {len(articles_to_update)} articles with calculated fields")


def reverse_calculate_missing_fields(apps, schema_editor):
    """Reverse migration - set calculated fields back to null."""
    Article = apps.get_model('verifast_app', 'Article')
    Article.objects.update(word_count=None, reading_level=None)


class Migration(migrations.Migration):

    dependencies = [
        ("verifast_app", "0005_automated_content_acquisition"),
    ]

    operations = [
        migrations.RunPython(
            calculate_missing_fields,
            reverse_calculate_missing_fields
        ),
    ]
