"""
Django settings for the VeriFast project.
Generated by 'django-admin startproject' using Django.
Enhanced with Pydantic configuration management.
"""

import os
from datetime import timedelta
import sys
from pathlib import Path
import logging
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

print(f"DEBUG: BASE_DIR is {BASE_DIR}", file=sys.stderr)
print(
    f"DEBUG: TEMPLATES DIRS entry is {os.path.join(BASE_DIR, 'templates')}",
    file=sys.stderr,
)

# Initialize Pydantic settings
try:
    from .pydantic_settings import settings as pydantic_settings
    PYDANTIC_SETTINGS_AVAILABLE = True
    print("✅ Pydantic settings loaded successfully", file=sys.stderr)
except ImportError as e:
    PYDANTIC_SETTINGS_AVAILABLE = False
    print(f"⚠️ Pydantic settings not available: {e}", file=sys.stderr)
    # Fallback to environment variables
    pydantic_settings = None

# Simple environment variable helper function (fallback)
def get_env(key, default=None, cast_type=str):
    value = os.environ.get(key, default)
    if cast_type is bool and isinstance(value, str):
        return value.lower() in ("true", "1", "yes", "on")
    return cast_type(value) if value is not None else default

# Enhanced settings getter with Pydantic integration
def get_setting(pydantic_path=None, env_key=None, default=None, cast_type=str):
    """
    Get setting from Pydantic settings first, then environment variables, then default.
    
    Args:
        pydantic_path: Dot-separated path in Pydantic settings (e.g., 'database.name')
        env_key: Environment variable key
        default: Default value if not found
        cast_type: Type to cast the value to
    """
    if PYDANTIC_SETTINGS_AVAILABLE and pydantic_path:
        try:
            # Navigate nested Pydantic settings
            value = pydantic_settings
            for part in pydantic_path.split('.'):
                value = getattr(value, part)
            if value is not None:
                return cast_type(value) if cast_type != str else value
        except (AttributeError, TypeError):
            pass
    
    # Fallback to environment variable
    if env_key:
        value = get_env(env_key, default, cast_type)
        # Handle the specific case of DB_OPTIONS being a string representation of a dict
        if env_key == 'DB_OPTIONS' and isinstance(value, str):
            try:
                # Attempt to parse it as a literal
                import ast
                return ast.literal_eval(value)
            except (ValueError, SyntaxError):
                # If it fails, return the default
                return default
        return value
    
    return default


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/stable/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_setting(
    pydantic_path='security.secret_key',
    env_key="SECRET_KEY", 
    default="django-insecure-default-key-for-development"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_setting(
    pydantic_path='security.debug',
    env_key="DEBUG", 
    default=True, 
    cast_type=bool
)

ALLOWED_HOSTS = get_setting(
    pydantic_path='security.allowed_hosts',
    env_key="ALLOWED_HOSTS", 
    default="127.0.0.1,localhost,testserver"
).split(",") if isinstance(get_setting(
    pydantic_path='security.allowed_hosts',
    env_key="ALLOWED_HOSTS", 
    default="127.0.0.1,localhost,testserver"
), str) else get_setting(
    pydantic_path='security.allowed_hosts',
    env_key="ALLOWED_HOSTS", 
    default=["127.0.0.1", "localhost", "testserver"]
)

# Feature Flags
ENABLE_AI_FEATURES = get_setting(
    pydantic_path='features.ai_enabled',
    env_key='ENABLE_AI_FEATURES', 
    default=True, 
    cast_type=bool
)
ENABLE_NLP_FEATURES = get_setting(
    pydantic_path='features.nlp_enabled',
    env_key='ENABLE_NLP_FEATURES', 
    default=True, 
    cast_type=bool
)
ENABLE_WIKIPEDIA_VALIDATION = get_setting(
    pydantic_path='features.wikipedia_validation',
    env_key='ENABLE_WIKIPEDIA_VALIDATION', 
    default=True, 
    cast_type=bool
)
ENABLE_ARTICLE_SCRAPING = get_setting(
    pydantic_path='features.article_scraping',
    env_key='ENABLE_ARTICLE_SCRAPING', 
    default=True, 
    cast_type=bool
)

# AI Service Configuration
GEMINI_API_KEY = get_setting(
    pydantic_path='gemini.api_key',
    env_key='GEMINI_API_KEY'
)
AI_FALLBACK_MODE = get_setting(
    pydantic_path='gemini.fallback_mode',
    env_key='AI_FALLBACK_MODE', 
    default='graceful'
)

# NLP Configuration
SPACY_MODEL_EN = get_setting(
    pydantic_path='nlp.spacy_model_en',
    env_key='SPACY_MODEL_EN', 
    default='en_core_web_sm'
)
SPACY_MODEL_ES = get_setting(
    pydantic_path='nlp.spacy_model_es',
    env_key='SPACY_MODEL_ES', 
    default='es_core_news_sm'
)

# External API Configuration
WIKIPEDIA_USER_AGENT = get_setting(
    pydantic_path='external_apis.wikipedia_user_agent',
    env_key='WIKIPEDIA_USER_AGENT', 
    default='VeriFastApp/1.0'
)

# Automated Content Acquisition Configuration
ENABLE_AUTOMATED_CONTENT_ACQUISITION = get_setting(
    pydantic_path='content_acquisition.enabled',
    env_key='ENABLE_AUTOMATED_CONTENT_ACQUISITION', 
    default=True, 
    cast_type=bool
)
NEWSDATA_API_KEY = get_setting(
    pydantic_path='content_acquisition.newsdata_api_key',
    env_key='NEWSDATA_API_KEY'
)
MAX_CONCURRENT_ACQUISITIONS = get_setting(
    pydantic_path='content_acquisition.max_concurrent',
    env_key='MAX_CONCURRENT_ACQUISITIONS', 
    default=3, 
    cast_type=int
)
CONTENT_ACQUISITION_INTERVAL_HOURS = get_setting(
    pydantic_path='content_acquisition.interval_hours',
    env_key='CONTENT_ACQUISITION_INTERVAL_HOURS', 
    default=4, 
    cast_type=int
)
MAX_ARTICLES_PER_CYCLE = get_setting(
    pydantic_path='content_acquisition.max_articles_per_cycle',
    env_key='MAX_ARTICLES_PER_CYCLE', 
    default=50, 
    cast_type=int
)
WIKIPEDIA_RATE_LIMIT = get_setting(
    pydantic_path='content_acquisition.wikipedia_rate_limit',
    env_key='WIKIPEDIA_RATE_LIMIT', 
    default=10, 
    cast_type=int
)

# Service Health Configuration
HEALTH_CHECK_INTERVAL = get_setting(
    pydantic_path='monitoring.health_check_interval',
    env_key='HEALTH_CHECK_INTERVAL', 
    default=300, 
    cast_type=int
)
LOG_SERVICE_ERRORS = get_setting(
    pydantic_path='monitoring.log_service_errors',
    env_key='LOG_SERVICE_ERRORS', 
    default=True, 
    cast_type=bool
)

# Performance Configuration
MAX_ARTICLE_LENGTH = get_setting(
    pydantic_path='performance.max_article_length',
    env_key='MAX_ARTICLE_LENGTH', 
    default=100000, 
    cast_type=int
)
PROCESSING_TIMEOUT = get_setting(
    pydantic_path='performance.processing_timeout',
    env_key='PROCESSING_TIMEOUT', 
    default=300, 
    cast_type=int
)
CONCURRENT_WORKERS = get_setting(
    pydantic_path='performance.concurrent_workers',
    env_key='CONCURRENT_WORKERS', 
    default=4, 
    cast_type=int
)

# Application definition
# The AI agent might have created apps with different names.
# We will start with a minimal set and add the AI's apps later if needed.
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Django REST Framework
    "rest_framework",
    "rest_framework_simplejwt",
    # Local apps
    "verifast_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "verifast_app.context_processors.user_xp_processor",
                "verifast_app.context_processors.admin_premium_processor",
                "verifast_app.context_processors.js_translations_processor",
            ],
            "debug": True,  # Enable template debugging
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/stable/ref/settings/#databases
DATABASE_URL = get_setting(
    pydantic_path='database.url',
    env_key="DATABASE_URL",
    default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}"
)
DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL)
}

if "test" in sys.argv:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ":memory:",
    }


# Password validation
# https://docs.djangoproject.com/en/stable/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/stable/topics/i18n/

LANGUAGE_CODE = "en-us"

LANGUAGES = [
    ("en", "English"),
    ("es", "Español"),
]

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

TIME_ZONE = "UTC"

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/stable/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/stable/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Configuration
CELERY_BROKER_URL = get_setting(
    pydantic_path='celery.broker_url',
    env_key="BROKER_URL", 
    default="redis://localhost:6379/0"
)
CELERY_RESULT_BACKEND = get_setting(
    pydantic_path='celery.result_backend',
    env_key="CELERY_RESULT_BACKEND", 
    default=CELERY_BROKER_URL
)
CELERY_IMPORTS = ("verifast_app.tasks",)

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': get_setting(
            pydantic_path='redis.cache_url',
            env_key="CACHE_URL", 
            default="redis://localhost:6379/1"
        ),
        'KEY_PREFIX': get_setting(
            pydantic_path='redis.key_prefix',
            env_key="CACHE_KEY_PREFIX", 
            default='verifast'
        ),
        'TIMEOUT': get_setting(
            pydantic_path='redis.default_timeout',
            env_key="CACHE_TIMEOUT", 
            default=300, 
            cast_type=int
        ),
    }
}

# Custom User Model
AUTH_USER_MODEL = "verifast_app.CustomUser"

# Authentication URLs
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/hour", "user": "1000/hour"},
}

# JWT Configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": "django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "verifast_app": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "celery": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
